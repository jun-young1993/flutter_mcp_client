# Flutter MCP Client PRD

## 목표
- Flutter 모바일(iOS/Android)에서 여러 MCP(Model Context Protocol) 서버에 연결 가능한 클라이언트 구현
- 다양한 MCP 서버(엔드포인트)를 동적으로 추가/선택/연결할 수 있어야 함
- 모바일 환경에서 동작하지 않는 서버는 graceful하게 처리

## 주요 기능
- MCP 서버 엔드포인트(주소, 인증정보 등) 추가/삭제/수정/선택
- 서버별 연결/인증/상태 관리 (연결됨/실패/미지원 등)
- 서버 연결 실패 시 fallback 및 에러 메시지 제공
- 서버별 커스텀 헤더/인증 토큰 등 유연하게 처리
- 서버 연결 후 AI 기능(예: 채팅, 파일 업로드 등) 확장 가능 구조
- 서버 목록 UI(추가/삭제/선택), 연결 상태 표시 UI
- 서버별 기능 확장(플러그인 구조 고려)

## 기술 스택
- Flutter (Dart)
- MCPClient (참고: https://github.com/app-appplayer/mcp_client)
- REST, WebSocket 등 다양한 프로토콜 지원
- (참고) https://github.com/leehack/flutter-mcp-ai-chat

## 확장성 및 고려사항
- 서버별 동작 방식/지원 기능이 다를 수 있으므로 추상화 계층 설계
- 모바일 환경에서 동작하지 않는 MCP 서버 graceful handling
- 인증 방식 다양화(토큰, API Key 등)
- 향후 AI 기능(채팅, 이미지 생성 등) 플러그인 형태로 확장 가능
- UI/UX: 서버 선택, 연결 상태, 에러 안내 등 사용자 친화적 설계

## 예시 사용자 시나리오
1. 사용자가 앱을 실행하고 MCP 서버 엔드포인트를 추가
2. 서버에 연결 시도 → 성공/실패/미지원 안내
3. 연결된 서버에서 AI 기능(채팅 등) 사용
4. 서버 목록에서 다른 서버로 전환 가능

## 참고 자료
- https://dev.to/mcpdevstudio/integrating-ai-with-flutter-building-powerful-apps-with-llmclient-and-mcpclient-5b0i
- https://github.com/app-appplayer/mcp_client
- https://github.com/leehack/flutter-mcp-ai-chat

# 프로젝트 디자인 패턴 및 아키텍처

## 아키텍처 개요
- **MVVM(Model-View-ViewModel) 패턴**을 기반으로 설계
  - View: Flutter 위젯(UI)
  - ViewModel: 상태 관리, 비즈니스 로직, 서버 통신 추상화
  - Model: 데이터 구조, 서버 응답/요청 모델
- **Clean Architecture** 적용
  - Presentation, Domain, Data 계층 분리
  - 의존성 역전(DI) 및 테스트 용이성 확보
- **의존성 주입(Dependency Injection)**
  - Provider, Riverpod, GetIt 등 활용 가능
  - 테스트 및 모듈화 용이

## 주요 폴더 구조 예시
```
lib/
  main.dart
  core/            # 공통 유틸, 상수, 에러 처리, DI
  models/          # 데이터 모델 (서버 응답/요청)
  services/        # MCPClient, 네트워크, 인증 등
  viewmodels/      # 상태 관리, 비즈니스 로직
  ui/              # 화면별 위젯(View)
    screens/
    components/
  repository/      # 데이터 소스 추상화 (API, 캐시 등)
  utils/           # 공통 함수, 헬퍼
  l10n/            # 다국어 지원
  config/          # 환경설정, 서버 엔드포인트 등
```

## 확장성 및 유지보수 전략
- 서버별 기능/프로토콜 확장 시 MCPClient 추상화 계층에 Adapter 패턴 적용
- 플러그인 구조로 AI 기능(채팅, 이미지 생성 등) 모듈화
- UI/UX 컴포넌트 재사용성 극대화
- 서버 엔드포인트/인증 등 config 분리로 환경별 대응

## 테스트 전략
- ViewModel/Service 단위 테스트 (mock 활용)
- MCPClient 통합 테스트 (서버 Mock/Stub)
- UI 위젯 테스트(Flutter test)
- E2E 테스트(필요시 integration_test)

## 예시 기술 스택
- 상태 관리: Riverpod, Provider, Bloc 등
- 네트워크: Dio, http
- DI: GetIt, Riverpod
- 테스트: flutter_test, mockito, integration_test

## 참고 아키텍처 자료
- https://github.com/brianegan/flutter_architecture_samples
- https://github.com/ResoCoder/flutter-tdd-clean-architecture-course
